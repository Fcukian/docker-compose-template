# This file is used to store all the environment variables that are used in the compose.yaml file.
# This file should be in the same directory as the compose.yaml file.

# Your HOSTNAME values should be the domain name that you are using to access the services. 
# e.g. AIOSTREAMS_HOSTNAME=aiostreams.example.com
#

# =========================================================
#                 PROFILE CONFIGURATION
# =========================================================
#
# As this compose.yaml is split up into profiles, you can choose which services you want to run by using profiles.
# If you only run 
#     docker compose up -d
# it will only start the default profile. 
#
# If you want to make use of the additional profiles, you can do one of the following:
#
# You should set the profiles that you want to use by setting the DOCKER_COMPOSE_PROFILES variable below using a space separated list.
# e.g. DOCKER_COMPOSE_PROFILES="stremio seanime"
#
# You can also use the --profile flag to specify which profile you want to use when running the compose file, but this will need to be specified
# each time, even when you want to down the containers.
# 
# Note: For the profiles you are using, it is REQUIRED for you to fill in every environment variable that is needed by that profile. 
# You can edit the compose.yaml to remove a service from a profile by just removing the profile from the profiles list for that service
# e.g. profiles: ["stremio", "all"] -> profiles: ["all"]
# Now, when you use the --profile flag with stremio, that service will not be started.
# If you remove the profiles list altogether, the service will always be started, regardless of the profile you use.
# 
# Find a list of the available profiles and the services they include at: https://guides.viren070.me/selfhosting/template
# You can also look at the compose.yaml file to see which services are included in each profile.
COMPOSE_PROFILES=


# =========================================================
#               DEFAULT PROFILE (REQUIRED)
# =========================================================
# This profile is used to set the environment variables for the services in the default profile.
# It includes things like, traefik, dozzle, watchtower, uptime kuma 


# ---------------------------------------------------------
#                       TRAEFIK
# ---------------------------------------------------------
# Traefik is a reverse proxy that is used to route traffic to the correct services.
# This is the most important service, as it is the entry point for all the other services.
#
# I will once again remind you to ensure that you set up DNS records for all the domain names that you are using.
# You can also use a wildcard DNS record to route all subdomains to your server.
# 
# Also make sure that both port 80 and 443 are open on your server.
# ---------------------------------------------------------
# This is the email that will be used to register with Let's Encrypt for SSL certificates.
LETSENCRYPT_EMAIL=
# ---------------------------------------------------------


# ---------------------------------------------------------
#                       DOZZLE
# ---------------------------------------------------------
# Dozzle is a log viewer for Docker. It is used to view the logs of the containers.
# This will be helpful for debugging purposes. 
# You will be able to access the logs at https://${DOZZLE_HOSTNAME}
#
# The DOZZLE_HASHED_PASSWORD must be a bcrypt hash of the password you want to use.
# You can generate a bcrypt hash by running the following command in your terminal, replacing <your_password_here> with your desired password.
# (removing the < and > as well): 
#
# htpasswd -niBb user <your_password_here> | cut -d ":" -f 2 | sed 's/\$/\$\$/g'
#
# If you get an error about htpasswd not being found, you can install apache2-utils, use this command.
# sudo apt-get install apache2-utils
# 
# Then, rerun the htpasswd command above.
#
# Note that this command will output the hash with any $ characters already escaped, so you can copy and paste it directly into the .env file.
# ---------------------------------------------------------
DOZZLE_USERNAME=
DOZZLE_HASHED_PASSWORD=
# e.g. dozzle.example.com
DOZZLE_HOSTNAME=
# ---------------------------------------------------------


# ---------------------------------------------------------
#                       WATCHTOWER
# ---------------------------------------------------------
# The AUTO_UPDATE_SCHEDULE is a cron expression that is used to schedule the auto update of the containers.
# It is different from a normal cron expression, as it has an additional field at the beginning for seconds.
# See @url:https://pkg.go.dev/github.com/robfig/cron@v1.2.0#hdr-CRON_Expression_Format
# 
# The AUTO_UPDATE_NOTIFICATION_URL is the URL that will be used to send notifications about the auto update.
# You can find more information about the available services at @url:https://containrrr.dev/shoutrrr/v0.8/services/overview/
# Make sure the format of the AUTO_UPDATE_NOTIFICATION_URL is correct.

# e.g. For discordd, the format is discord://token@id 
# Discord webhook URLs are in the format https://discord.com/api/webhooks/<webhook_id>/<webhook_token>
# So the URL would be discord://<webhook_token>@<webhook_id> 
# ---------------------------------------------------------
AUTO_UPDATE_SCHEDULE=0 0 */8 * * *   # This will run the auto update every 8 hours
AUTO_UPDATE_NOTIFICATION_URL=


# ---------------------------------------------------------
#                       UPTIME KUMA
# ---------------------------------------------------------
# Uptime Kuma is a self-hosted monitoring tool that provides uptime monitoring for your services.
# You will be able to access the dashboard at https://${UPTIME_KUMA_HOSTNAME}
# 
# I have configured uptime kuma with 2 domains, one for the main dashboard and one for the status page.
# If you set up a status page on uptime kuma, you can add the STATUS_PAGE_HOSTNAME as the domain name.
# This will allow you to directly access the status page at https://${STATUS_PAGE_HOSTNAME}
# rather than https://${UPTIME_KUMA_HOSTNAME}/status/<status_page_name> 
# ---------------------------------------------------------
# e.g. kuma.example.com
UPTIME_KUMA_HOSTNAME=
# e.g. status.example.com (when creating a status page on kuma, you can add this hostname as the domain name)
STATUS_PAGE_HOSTNAME=


# ---------------------------------------------------------
#             FLAME and/or HONEY - START PAGE
# ---------------------------------------------------------
# The start page is a custom start page that you can use to access all your services.
# You can choose to use either Flame or Honey or both.
# If you choose to only use one, you must remove the other from the compose.yaml file.
# Honey: https://github.com/dani3l0/honey (showcase: https://honeyy.vercel.app/)
# Flame: https://github.com/pawelmalak/flame
# 
# Flame will come preconfigured with all the services that are available in the compose.yaml file.
# Honey looks far better and is more compact, but you will need to manually add the services to it.
#
# Luckily, I have provided my configuration for Honey, so you can use that.
# If you followed the instructions in the README, you should have a file called config.json in the ./data/honey directory.
# You will simply need to adjust the URLs to match your domain names and remove any services you don't have.
# You can also reorder the services list as you like.
#
# You can access the start page at https://${FLAME_HOSTNAME} or https://${HONEY_HOSTNAME}
#
# I've personally set HONEY_HOSTNAME to my main domain name, so that I can access the start page at the root of my domain.
# e.g. if my domain was example.com, I would access the start page at https://example.com
# This does require a separate DNS record, so make sure you set that up.
# ---------------------------------------------------------
FLAME_HOSTNAME=
FLAME_PASSWORD=

HONEY_HOSTNAME=

# ---------------------------------------------------------
#                DASH DOT - DASHBOARD
# ---------------------------------------------------------
# Dash Dot is a dashboard that you can use to monitor your VPS. It provides information about the CPU, RAM, Disk, and Network usage.
# You will be able to access the dashboard at https://${DASHDOT_HOSTNAME}
# ---------------------------------------------------------
# e.g. dashdot.example.com
DASHDOT_HOSTNAME=
# This is the title of the page that shows up in the browser tab
DASHDOT_PAGE_TITLE=
# Whether you want your domain name to show up in the dashboard
# e.g. if your domain was dashdot.example.com, it would show example.com in the dashboard
DASHDOT_SHOW_HOST=
# Whether you want to use a custom host for the dashboard, instaed of the default above. Requires DASHDOT_SHOW_HOST to be set to true
DASHDOT_CUSTOM_HOST= 


# =========================================================
#              ADDITIONAL PROFILES (OPTIONAL)
# =========================================================
# These environment variables are used to set the environment variables for the services in the additional profiles.
# The available profiles are:
# - stremio
# - plausible
# - seanime
# - searxng
# - debrid_media_server 
# - all 
#
# The 'all' profile includes all the services from the default profile and all the additional profiles.
# Note: the 'debrid_media_server' profile includes services that are mostly commented out in the compose.yaml file.
# This is because there may be issues with my current setup. Check the compose.yaml file for more information.
# ========================================================


# =========================================================
#                 STREMIO PROFILE
# =========================================================
# These environment variables are used to set the environment variables for the services in the stremio profile.
# The stremio profile includes all the services that are required to run a Stremio setup.



# ---------------------------------------------------------
#                     EXTERNAL SERVICES
# ---------------------------------------------------------
# 
# Get your API key and Access token from https://www.themoviedb.org/settings/api
# Needed by: AIOStreams, MediaFusion, TMDB Addon
TMDB_API_KEY= 
# Needed by: Jackettio
TMDB_ACCESS_TOKEN=
# ---------------------------------------------------------


# ---------------------------------------------------------
#                      AIOSTREAMS
# ---------------------------------------------------------
# Profiles: all, stremio
#
# To generate the AIOSTREAMS_SECRET_KEY, run the following command in your terminal:
# openssl rand -hex 32
#
# The AIOSTREAMS_API_KEY is a random password that you can set to whatever you like. It protects your AIOStreams instance from unauthorized access
# by requiring an API key to configure and use the addon.
#
# ---------------------------------------------------------
AIOSTREAMS_HOSTNAME=
AIOSTREAMS_API_KEY=
AIOSTREAMS_SECRET_KEY=

# This environment variable is used to give AIOStreams access to the a proxy to make requests to addons through. 
# This is only needed when your VPS is blocked by Torrentio
# You can run
# curl -s -w "\n%{http_code}\n" "https://torrentio.strem.fun/manifest.json"
# to check if your VPS is blocked by Torrentio.
# If you get a 403 error, you will need to set this environment variable.
# Otherwise, you can get rid of it, or set it to an empty string.
AIOSTREAMS_ADDON_PROXY=http://warp:1080 

# The following environment variables allow AIOStreams to use our self hosted addons instead of the public ones. 
# If you are not hosting the other addons, you must remove these environment variables.
AIOSTREAMS_COMET_URL=http://comet:2020/
# We have to force a hostname for Comet, as the internal URL that is returned by Comet is not accessible publicly for streaming.
AIOSTREAMS_FORCE_COMET_HOSTNAME=${COMET_HOSTNAME:-}
AIOSTREAMS_COMET_INDEXERS=${COMET_INDEXERS:-}
AIOSTREAMS_MEDIAFUSION_URL=http://mediafusion:8000/
AIOSTREAMS_JACKETTIO_URL=http://jackettio:4000/
# replace with the indexers you want to use for the default Jackettio configuration e.g. ["therarbg", "thepiratebay"]
AIOSTREAMS_JACKETT_INDEXERS=[] 
AIOSTREAMS_STREMIO_JACKETT_URL=http://stremio-jackett:3000/
AIOSTREAMS_JACKETT_API_KEY=${JACKETT_API_KEY:-}
AIOSTREAMS_EASYNEWS_PLUS_URL=http://easynews-plus:1337/
# ---------------------------------------------------------



# ---------------------------------------------------------
#                     AIOSTREMIO
# ---------------------------------------------------------
# Profiles: all, stremio
#
# The AIOSTREMIO_ADMIN_USERNAME and AIOSTREMIO_ADMIN_PASSWORD are the credentials that you will use to access the AIOStremio dashboard.
# 
# The main configuration for AIOStremio is stored within ./data/aiostremio/config.json 
# Without this file, AIOStremio will be stuck in a crash loop, so ensure you create this file
# You can use the template provided in the AIOStremio repository: 
# https://github.com/Viren070/AIOStremio/blob/main/config.json.example
#
# The DEBRID_API_KEY is the API key for the debrid service you want to use by default. 
# You can also set addon specific debrid API keys through the config.json file.
# ---------------------------------------------------------
AIOSTREMIO_HOSTNAME=
AIOSTREMIO_ADMIN_USERNAME=
AIOSTREMIO_ADMIN_PASSWORD=
DEBRID_API_KEY=
# ---------------------------------------------------------


# ---------------------------------------------------------
#                      COMET
# ---------------------------------------------------------
# Profiles: all, stremio
#
# The COMET_ADMIN_PASSWORD is a random password that you can set to whatever you like. It allows you to access the dashboard of Comet, which currently
# only shows active connections to the proxy service of Comet. 
#
# The COMET_INDEXERS is a list of the indexers that you want to use with Comet. 
# 
# We can either use Prowlarr or Jackett as the indexer. If you would like to use Jackett instead,
# Set COMET_INDEXER_TYPE=jackett and COMET_INDEXER_URL=http://jackett:9117 and COMET_INDEXER_API_KEY=${JACKETT_API_KEY:-}
#
# For COMET_INDEXERS, you can add the names of the indexers that you want to use. This should just be the names of the indexers as you see them on the dashboards
# of Prowlarr or Jackett.
# ---------------------------------------------------------
COMET_ADMIN_PASSWORD=
COMET_HOSTNAME=
COMET_INDEXER_TYPE=prowlarr # or jackett
COMET_INDEXER_URL=http://prowlarr:9696 # or http://jackett:9117
COMET_INDEXER_API_KEY=${PROWLARR_API_KEY:-} # or ${JACKETT_API_KEY:-}
COMET_INDEXERS=[]  # e.g ["therarbg", "thepiratebay"]
# ---------------------------------------------------------


# ---------------------------------------------------------
#                     MEDIAFLOW PROXY
# ---------------------------------------------------------
# Profiles: all, stremio
#
# The MEDIAFLOW_API_PASSWORD is a random password that you can set to whatever you like. It is used to protect the MediaFlow Proxy service.
# ---------------------------------------------------------
MEDIAFLOW_API_PASSWORD=
MEDIAFLOW_HOSTNAME=
# ---------------------------------------------------------


# ---------------------------------------------------------
#                     MEDIAFUSION
# ---------------------------------------------------------
# Profiles: all, stremio
#
# The MEDIAFUSION_API_PASSWORD is a random password that you can set to whatever you like. It is used to protect the MediaFusion service.
# The MEDIAFUSION_SECRET_KEY is a secret key that you can generate using the following command:
# openssl rand -hex 16
#
# The core configuration for MediaFusion is stored within ./data/mediafusion/.env 
# It does not require any changing, but if you would like to adjust the settings, you can do so in the .env file.
# ---------------------------------------------------------
MEDIAFUSION_API_PASSWORD=
MEDIAFUSION_HOSTNAME=
MEDIAFUSION_SECRET_KEY=
# ---------------------------------------------------------


# ---------------------------------------------------------
#                     STREMIO JACKETT
# ---------------------------------------------------------
# Profiles: all, stremio
# ---------------------------------------------------------
STREMIO_JACKETT_HOSTNAME=
# ---------------------------------------------------------


# ---------------------------------------------------------
#                     JACKETTIO
# ---------------------------------------------------------
# Profiles: all, stremio
# ---------------------------------------------------------
JACKETTIO_HOSTNAME=
# ---------------------------------------------------------


# ---------------------------------------------------------
#                     STREMTHRU
# ---------------------------------------------------------
# Profiles: all, stremio
# ---------------------------------------------------------
STREMTHRU_HOSTNAME=
# ---------------------------------------------------------


# ---------------------------------------------------------
#                     EASYNEWS PLUS
# ---------------------------------------------------------
# Profiles: all, stremio
# ---------------------------------------------------------
EASYNEWS_PLUS_HOSTNAME=
# ---------------------------------------------------------


# ---------------------------------------------------------
#                     PROWLARR
# ---------------------------------------------------------
# Profiles: all, stremio, debrid_media_server
#
# The PROWLARR_API_KEY is the API key that you can find in the Prowlarr dashboard.
# On your first run, you can leave this blank, after you have started the containers, you can find the API key in the Prowlarr dashboard.
# You can also run the following command to get the API key:
# sudo docker exec -i prowlarr cat /config/config.xml | grep -oP '(?<=<ApiKey>).*(?=</ApiKey>)'
#
# Make sure you add authentication to Prowlarr by setting up a username and password with the Login Form option,
# you will be asked to do so when you first access the Prowlarr dashboard.
# ---------------------------------------------------------
PROWLARR_API_KEY=
PROWLARR_HOSTNAME=
# ---------------------------------------------------------


# ---------------------------------------------------------
#                     JACKETT
# ---------------------------------------------------------
# Profiles: all, stremio, debrid_media_server
#
# The JACKETT_API_KEY is the API key that you can find in the Jackett dashboard.
# On your first run, you can leave this blank, after you have started the containers, you can find the API key in the Jackett dashboard.
# You can also run the following command to get the API key (after the container is running):
# sudo docker exec -i jackett cat /config/Jackett/ServerConfig.json | jq -r '.APIKey'
#
# Make sure you add authentication to Jackett by setting up an admin password in the Jackett dashboard.
# ---------------------------------------------------------
JACKETT_API_KEY=
JACKETT_HOSTNAME=
# ---------------------------------------------------------

# ---------------------------------------------------------
#                     TMDB ADDON
# ---------------------------------------------------------
# Profiles: all, stremio
#
# You can get your FANAART_API_KEY from https://fanart.tv/get-an-api-key/
# ---------------------------------------------------------
TMDB_ADDON_HOSTNAME=
FANART_API_KEY= 
# ---------------------------------------------------------


# ---------------------------------------------------------
#                    STREMIO SERVER 
# ---------------------------------------------------------
# Profiles: all, stremio
# ---------------------------------------------------------
STREMIO_SERVER_HOSTNAME=
# ---------------------------------------------------------


# ---------------------------------------------------------
#                    ADDON MANAGER
# ---------------------------------------------------------
# Profiles: all, stremio
# ---------------------------------------------------------
ADDON_MANAGER_HOSTNAME=
# ---------------------------------------------------------


# ---------------------------------------------------------
#        STREMIO CATALOGS & STREMIO TRAKT ADDONS
# ---------------------------------------------------------
# Profiles: all, stremio
#
# For these two addons, we need to obtain a Trakt Client ID and secret in order for the addons to work.
# To obtain these credentials:
# 1. Create an account on Trakt.tv (https://trakt.tv).
# 2. Go to the applications section (https://trakt.tv/oauth/applications).
# 3. Create a new application by filling in the required information (name, description, etc.).
#    - For the "Redirect URL", add the following URLs (replacing the ${*_HOSTNAME} with your actual hostname):
#      - https://${RAVENN_TRAKT_HOSTNAME}/callback
#      - https://${RAVENN_CATALOGS_HOSTNAME}/callback
# 
# 
# For these two addons, after your inital compose up, you need to create the databases in postgres
# You can do this by running the following commands:
# docker exec -it ravenn-postgres psql -U postgres
# CREATE DATABASE stremio_trakt_db;
# CREATE DATABASE stremio_catalog_db;
# \q
#
# ---------------------------------------------------------
RAVENN_CATALOGS_HOSTNAME=
RAVENN_TRAKT_HOSTNAME=
TRAKT_CLIENT_ID=
TRAKT_CLIENT_SECRET=
# ---------------------------------------------------------

# ---------------------------------------------------------
#                   OMG TV STREMIO ADDON
# ---------------------------------------------------------
# Profiles: all, stremio
# ---------------------------------------------------------
OMG_TV_STREMIO_ADDON_HOSTNAME=
# ---------------------------------------------------------

# =========================================================
#                 NZBHYDRA2 PROFILE
# =========================================================
# These environment variables are used to set the environment variables for the services in the nzbhydra2 profile.
# The nzbhydra2 profile only includes nzbhydra2.

# ---------------------------------------------------------
#                     NZBHYDRA2
# ---------------------------------------------------------
# Profiles: all, nzbhydra2
#
# Make sure you add authentication to NZBHydra2 by setting up a username and password in the NZBHydra2 dashboard
# at Config > Authorization. 
# Set Auth type to Login Form, and check all switches. 
# Then, Add a new admin user with a username and password and make sure you remember these.
# ---------------------------------------------------------
NZBHYDRA2_HOSTNAME=
# ---------------------------------------------------------

# =========================================================
#                 SEANIME PROFILE
# =========================================================
# These environment variables are used to set the environment variables for the services in the seanime profile.
# The seanime profile only includes seanime. 


# ---------------------------------------------------------
#                     SEANIME
# ---------------------------------------------------------
# Profiles: seanime, all
# 
# The SEANIME_HASHED_PASSWORD is the hashed password that you will use to access the Seanime service.
# To get the hash for SEANIME_HASHED_PASSWORD, run the following command in your terminal, replacing <your_password_here> with your desired password.
#
# htpasswd -niBb user <your_password_here> | cut -d ":" -f 2 | sed 's/\$/\$\$/g'
#
# If you get an error about htpasswd not being found, you can install apache2-utils, use this command.
# sudo apt-get install apache2-utils
# 
# Then, rerun the htpasswd command above.
#
# IMPORTANT: Once you have the container running, you need to edit Seanime's config.toml file in order to set the correct host. 
# Run the following command to do this. 
# sudo sed -i 's/127.0.0.1/0.0.0.0/' ./data/seanime/config.toml
# Then, restart the container by running `sudo docker compose restart seanime
# ---------------------------------------------------------
SEANIME_HOSTNAME=
SEANIME_USERNAME=
SEANIME_HASHED_PASSWORD=  
# ---------------------------------------------------------


# =========================================================
#                 SEARXNG PROFILE
# =========================================================
# These environment variables are used to set the environment variables for the services in the searxng profile.
# The searxng profile only includes searxng.

# ---------------------------------------------------------
#                     SEARXNG
# ---------------------------------------------------------
# Profiles: searxng, all
# ---------------------------------------------------------
SEARXNG_HOSTNAME=
# ---------------------------------------------------------

# =========================================================
#                 PLAUSIBLE PROFILE
# =========================================================
# These environment variables are used to set the environment variables for the services in the plausible profile.
# The plausible profile only includes plausible.

# ---------------------------------------------------------
#                     PLAUSIBLE
# ---------------------------------------------------------
# Profiles: plausible, all
# 
# The PLAUSIBLE_SECRET_KEY_BASE is a secret key that you can generate using the following command:
# openssl rand -base64 48 
# ---------------------------------------------------------
PLAUSIBLE_HOSTNAME=
PLAUSIBLE_SECRET_KEY_BASE=
# ---------------------------------------------------------


# ---------------------------------------------------------
#                      ZIPLINE  
# ---------------------------------------------------------
# Profiles: zipline, all
#
# Zipline is a ShareX / File upload server
# 
# To generate a POSTGRES password, run the following command in your terminal:
# openssl rand -base64 42 | tr -dc A-Za-z0-9 | cut -c -32 | tr -d '\n'; echo
#
# To generate the CORE_SECRET, run the following command:
# openssl rand -base64 42 | tr -dc A-Za-z0-9 | cut -c -32 | tr -d '\n'; echo
#
# Once you fill these values in and start the container, head to the dashboard and create an admin user
# Most of the configuration for Zipline is done through the web interface. 
#
# Within the server settings
# Set the 'Default domain' under 'Core' to the value you set for ZIPLINE_HOSTNAME
# Also enable Return HTTPS URLs
# ---------------------------------------------------------
ZIPLINE_CORE_SECRET=
ZIPLINE_POSTGRES_PASSWORD=
ZIPLINE_HOSTNAME=

# =========================================================
#               DEBRID MEDIA SERVER PROFILE
# =========================================================
# This profile is used to set the environment variables for the services in the debrid_media_server profile.

# ---------------------------------------------------------
#                    BLACKHOLE
# ---------------------------------------------------------
# These are the environment variables for the Blackhole service. This is the download client that manages creating symlinks and telling 
# Sonarr/Radarr to import the files.
# 
# The main configuration for Blackhole is stored in ./data/blackhole/.env 
# You can find an example of the .env file at Savvy Guides:
# https://savvyguides.wiki/sailarrsguide/#blackhole-script
# ---------------------------------------------------------
REALDEBRID_MOUNT_TORRENTS_PATH="/mnt/remote/realdebrid/__all__"
BLACKHOLE_BASE_WATCH_PATH="/mnt/symlinks"
BLACKHOLE_RADARR_PATH="radarr"
BLACKHOLE_SONARR_PATH="sonarr"
# ---------------------------------------------------------

# ---------------------------------------------------------
#                   RADARR/SONARR
# ---------------------------------------------------------
# These are the environment variables for the Radarr and Sonarr services. These services are used to manage your media library.
# ---------------------------------------------------------
RADARR_HOSTNAME=
RADARR4K_HOSTNAME=
RADARRANIME_HOSTNAME=

SONARR_HOSTNAME=
SONARR4K_HOSTNAME=
SONARRANIME_HOSTNAME=
# ---------------------------------------------------------

# ---------------------------------------------------------
#                    AUTOSYNC 
# ---------------------------------------------------------
# These are the environment variables for the Autosync service. This service is used to automatically sync your multiple Radarr/Sonarr instances.
#
# Autosync has its own config.yaml that should be placed in ./data/autosync/config.yaml
# You can find an example of the config.yaml file at the GitHub repository: https://github.com/Pukabyte/autosync
#
# Note: There is no arm image for Autosync, so you may need to build the image yourself.
# ---------------------------------------------------------
AUTOSYNC_HOSTNAME=

# ---------------------------------------------------------
#                   PLEX
# ---------------------------------------------------------
# These are the environment variables for the Plex service. Plex is a media server that allows you to stream your media to any device.
#
# The PLEX_CLAIM is the claim token that you can use to claim your server with Plex. You can get this from https://www.plex.tv/claim/
# ---------------------------------------------------------
PLEX_CLAIM=
PLEX_HOSTNAME=
# ---------------------------------------------------------

# =========================================================
#                 GENERAL CONFIGURATION
# ========================================================= 
# These are the default values for the environment variables that are used in the compose.yaml file.
# You should not change these values unless you know what you are doing.
#


# Timezone used for auto updates, and other services that require a timezone e.g. Prowlarr, Jackett, etc.
# https://en.wikipedia.org/wiki/List_of_tz_database_time_zones 
# Use the values in the TZ Identifier column
# Needed by: Prowlarr, Jackett, NZBHydra2, Plex, Watchtower, Stremio Jackett
TZ=UTC  

# The POSTGRES credentials can be left as is, as they are only accessed internally. 
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres

# The network that the containers will be connected to.
# You should change this if you want to use an external network or just change the name of the network.
DOCKER_NETWORK=aio_default
DOCKER_NETWORK_EXTERNAL=false
